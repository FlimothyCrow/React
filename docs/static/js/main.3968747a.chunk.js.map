{"version":3,"sources":["nuPoker/enums.js","nuPoker/handEval.js","nuPoker/pokerGraphics.js","nuPoker/nu_poker.js","nuPoker/HandRanker.jsx","playablePoker/playablePoker.jsx","App.js","serviceWorker.js","index.js"],"names":["getHandRank","handType","highCard","hand","card","face","_","orderBy","isFlush","grouped","map","countBy","val","key","suit","amount","orderedByAmount","undefined","isStraight","arrayOfFaces","handEval","length","counted","parseInt","faceCount","type","values","suitToString","char","cardToImage","onClickFN","cardToHighlight","cardFileName","cardObject","toString","toUpperCase","cardToFileName","isMatch","onClick","className","src","alt","deckMaker","faces","flatMap","drawHand","deck","splice","handToString","evaluated","cardFaceString","int","compareHands","hands","eval0","eval1","highed","highest","Math","max","apply","card0","card1","suitRanks","s","h","d","c","areSuitsDesc","indexOf","playerOneHigher","HandRanker","props","state","currentHand","poker","this","push","setState","hightlightCard","graphic","filter","includes","addToHand","dumpHand","console","log","removeFromHand","React","Component","PlayablePoker","shuffle","playerOneHand","playerTwoHand","isGameStarted","shuffling","swapCounter","showCards","results","idxToMove","shift","playerHandResults","computerHandResults","renderDeck","idx","swapCards","printResults","App","currentMode","mode","href","e","preventDefault","setGameMode","setPageLink","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3968747a.chunk.js","sourcesContent":["export const PAIR = \"pair\"\r\nexport const TWO_PAIR = \"two pair\"\r\nexport const THREE = \"three\"\r\nexport const HIGH_CARD = \"high card\"\r\nexport const FOUR = \"four\"\r\nexport const STRAIGHT = \"straight\"\r\nexport const FLUSH = \"flush\"\r\nexport const FULL_HOUSE = \"full house\"\r\nexport const STRAIGHT_FLUSH = \"straight flush\"\r\n\r\nexport function getHandRank(handType) {\r\n  let rankedHands = {\r\n    [HIGH_CARD]: 0,\r\n    [PAIR]: 1,\r\n    [TWO_PAIR]: 2,\r\n    [THREE]: 3,\r\n    [STRAIGHT]: 4,\r\n    [FLUSH]: 5,\r\n    [FULL_HOUSE]: 6,\r\n    [FOUR]: 7,\r\n    [STRAIGHT_FLUSH]: 8,\r\n  }\r\n  return rankedHands[handType]\r\n}\r\n","import _ from \"lodash\"\r\nimport {\r\n  PAIR,\r\n  TWO_PAIR,\r\n  THREE,\r\n  FOUR,\r\n  HIGH_CARD,\r\n  FLUSH,\r\n  STRAIGHT,\r\n  FULL_HOUSE,\r\n  STRAIGHT_FLUSH,\r\n  getHandRank,\r\n} from \"./enums\"\r\n\r\nexport function highCard(hand) {\r\n  for (var card of hand) {\r\n    if (card.face === 1) return card\r\n  }\r\n  return _.orderBy(hand, [\"face\", \"suit\"], [\"desc\", \"desc\"])[0]\r\n}\r\n\r\nexport function faceCount(hand) {\r\n  var grouped = _.map(_.countBy(hand, \"face\"), (val, key) => ({ face: parseInt(key), amount: val }))\r\n  return _.orderBy(grouped, [\"amount\", \"face\"], [\"desc\", \"asc\"])\r\n}\r\n\r\nexport function isFlush(hand) {\r\n  var grouped = _.map(_.countBy(hand, \"suit\"), (val, key) => ({ suit: key, amount: val }))\r\n  var orderedByAmount = _.orderBy(grouped, [\"amount\"], [\"desc\"])\r\n  return orderedByAmount[0].amount === 5 ? orderedByAmount[0].suit : undefined\r\n}\r\n\r\nexport function isStraight(hand) {\r\n  var arrayOfFaces = _.orderBy(_.map(hand, (card) => card.face))\r\n  if (arrayOfFaces[4] - arrayOfFaces[0] === 4) {\r\n    return [arrayOfFaces[4], arrayOfFaces[0]]\r\n  } else if (arrayOfFaces[4] - arrayOfFaces[1] === 3 && arrayOfFaces[0] === 1 && arrayOfFaces[4] === 13) {\r\n    return [14, 10]\r\n  }\r\n}\r\n\r\nexport function playerOneHigher(eval0, eval1) {\r\n  var rank0 = getHandRank(eval0.type) // PAIR\r\n  var rank1 = getHandRank(eval1.type) // TWO_PAIR\r\n  return rank0 > rank1\r\n}\r\n\r\nexport function handEval(hand) {\r\n  if (hand && hand.length === 0) {\r\n    return undefined\r\n  }\r\n  let counted = faceCount(hand)\r\n  if (counted[0].amount === 2 && counted[1]?.amount === 2) {\r\n    return { type: TWO_PAIR, values: [counted[1].face, counted[0].face] }\r\n  } else if (counted[0].amount === 3 && counted[1]?.amount === 2) {\r\n    return { type: FULL_HOUSE, values: [counted[0].face, counted[1].face] }\r\n  } else if (counted[0].amount === 2) {\r\n    return { type: PAIR, values: [counted[0].face] }\r\n  } else if (counted[0].amount === 3) {\r\n    return { type: THREE, values: [counted[0].face] }\r\n  } else if (counted[0].amount === 4) {\r\n    return { type: FOUR, values: [counted[0].face] }\r\n  } else if (isFlush(hand) && isStraight(hand)) {\r\n    return { type: STRAIGHT_FLUSH, values: isStraight(hand) }\r\n  } else if (isFlush(hand)) {\r\n    return { type: FLUSH, values: [isFlush(hand)] }\r\n  } else if (isStraight(hand)) {\r\n    return { type: STRAIGHT, values: isStraight(hand) }\r\n  } else {\r\n    return { type: HIGH_CARD, values: [highCard(hand).face, highCard(hand).suit] }\r\n  }\r\n}\r\n","import React from \"react\"\r\n\r\nexport function cardToFileName(cardObject) {\r\n  let face = cardObject.face.toString()\r\n  if (face === \"13\") {\r\n    face = \"K\"\r\n  } else if (face === \"1\") {\r\n    face = \"A\"\r\n  } else if (face === \"12\") {\r\n    face = \"Q\"\r\n  } else if (face === \"11\") {\r\n    face = \"J\"\r\n  }\r\n  return face + cardObject.suit.toUpperCase() + \".jpg\"\r\n}\r\n\r\nexport function suitToString(char) {\r\n  if (char === \"s\") {\r\n    return \"Spades\"\r\n  } else if (char === \"d\") {\r\n    return \"Diamonds\"\r\n  } else if (char === \"c\") {\r\n    return \"Clubs\"\r\n  } else if (char === \"h\") {\r\n    return \"Hearts\"\r\n  }\r\n}\r\n\r\nexport function cardToImage(card, onClickFN, cardToHighlight) {\r\n  let cardFileName = cardToFileName(card)\r\n  let isMatch = cardToHighlight && cardToHighlight.suit === card.suit && cardToHighlight.face === card.face\r\n  // if cardToHightlight is passed into cardToImage call\r\n  return (\r\n    <span key={cardFileName} onClick={() => onClickFN()} className={isMatch && \"highlight\"}>\r\n      <img className=\"card p-1\" src={\"cardGraphics/\" + cardFileName} alt=\"2C\" />\r\n    </span>\r\n  )\r\n}\r\n","import _ from \"lodash\"\r\nimport { handEval, highCard, playerOneHigher } from \"./handEval.js\"\r\nimport { suitToString } from \"./pokerGraphics\"\r\nimport { PAIR, TWO_PAIR, THREE, FOUR, HIGH_CARD, FLUSH, STRAIGHT, FULL_HOUSE, STRAIGHT_FLUSH } from \"./enums\"\r\n\r\nexport function deckMaker() {\r\n  var faces = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\r\n  var suits = [\"d\", \"c\", \"s\", \"h\"]\r\n  return _.flatMap(suits, (suit) => {\r\n    return faces.map((face) => {\r\n      return { face: face, suit: suit }\r\n    })\r\n  })\r\n}\r\n\r\nexport function drawHand(deck) {\r\n  return deck.splice(0, 5)\r\n}\r\n\r\nexport function handToString(hand) {\r\n  var evaluated = handEval(hand)\r\n  if (evaluated.type === PAIR) {\r\n    return `pair of ${cardFaceString(evaluated.values[0])}s`\r\n  } else if (evaluated.type === THREE) {\r\n    return `three ${cardFaceString(evaluated.values[0])}s`\r\n  } else if (evaluated.type === TWO_PAIR) {\r\n    return `two pair ${cardFaceString(evaluated.values[0])} and ${cardFaceString(evaluated.values[1])}`\r\n  } else if (evaluated.type === FOUR) {\r\n    return `four ${cardFaceString(evaluated.values[0])}s`\r\n  } else if (evaluated.type === FULL_HOUSE) {\r\n    return `full house ${cardFaceString(evaluated.values[0])} and ${cardFaceString(evaluated.values[1])}`\r\n  } else if (evaluated.type === FLUSH && evaluated.values[0] === \"c\") {\r\n    return `flush of clubs`\r\n  } else if (evaluated.type === FLUSH && evaluated.values[0] === \"d\") {\r\n    return `flush of diamonds`\r\n  } else if (evaluated.type === FLUSH && evaluated.values[0] === \"h\") {\r\n    return `flush of hearts`\r\n  } else if (evaluated.type === FLUSH && evaluated.values[0] === \"s\") {\r\n    return `flush of spades`\r\n  } else if (evaluated.type === STRAIGHT) {\r\n    return `straight ${cardFaceString(evaluated.values[1])} through ${cardFaceString(evaluated.values[0])}`\r\n  } else if (evaluated.type === STRAIGHT_FLUSH) {\r\n    return `straight flush ${cardFaceString(evaluated.values[1])} through ${cardFaceString(evaluated.values[0])}`\r\n  } else if (evaluated.type === HIGH_CARD) {\r\n    return `high card ${cardFaceString(evaluated.values[0])} of ${suitToString(cardFaceString(evaluated.values[1]))}`\r\n  }\r\n}\r\n\r\nexport function cardFaceString(int) {\r\n  if (int === 13) {\r\n    return \"King\"\r\n  } else if (int === 12) {\r\n    return \"Queen\"\r\n  } else if (int === 11) {\r\n    return \"Jack\"\r\n  } else if (int === 1) {\r\n    return \"Ace\"\r\n  } else {\r\n    return int\r\n  }\r\n}\r\n\r\nexport function isCheating(hand) {\r\n  var uniqueLength = _.uniqBy(hand, (card) => {\r\n    // return JSON.stringify(card) // to avoid deepEqual\r\n    return card.face + card.suit // to avoid deepEqual\r\n  }).length\r\n  return uniqueLength === 5 ? false : true\r\n}\r\n\r\nexport function areSuitsDesc(card0, card1) {\r\n  // implement into sortBy for multiple hands\r\n  var suitRanks = { s: 3, h: 2, d: 1, c: 0 }\r\n  return suitRanks[card0.suit] > suitRanks[card1.suit]\r\n}\r\n\r\nexport function compareHands(hands) {\r\n  var eval0 = handEval(hands[0])\r\n  var eval1 = handEval(hands[1])\r\n  var highed = _.map(hands, highCard)\r\n  var highest = Math.max.apply(\r\n    null,\r\n    highed.map((card) => card.face)\r\n  )\r\n\r\n  if (eval0.type === TWO_PAIR && eval1.type === TWO_PAIR) {\r\n    if (eval0.values[0] === eval1.values[0]) {\r\n      return eval0.values[1] > eval1.values[1] ? 0 : 1\r\n    } else {\r\n      return eval0.values[0] > eval1.values[0] ? 0 : 1\r\n    }\r\n  } else if (\r\n    (eval0.type === PAIR && eval1.type === PAIR) ||\r\n    (eval0.type === THREE && eval1.type === THREE) ||\r\n    (eval0.type === FOUR && eval1.type === FOUR)\r\n  ) {\r\n    return eval0.values[0] > eval1.values[0] ? 0 : 1\r\n  } else if (highed[0].face === highed[1].face) {\r\n    return areSuitsDesc(highed[0], highed[1]) ? 0 : 1\r\n  } else if (eval0.type === HIGH_CARD && eval1.type === HIGH_CARD) {\r\n    return _.indexOf(\r\n      highed.map((card) => card.face),\r\n      highest\r\n    )\r\n  } else {\r\n    return playerOneHigher(eval0, eval1) ? 0 : 1\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport * as poker from \"./nu_poker\"\r\nimport * as graphic from \"./pokerGraphics.js\"\r\nimport { handEval } from \"./handEval.js\"\r\nimport { HIGH_CARD } from \"./enums\"\r\n\r\nexport default class HandRanker extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      currentHand: [],\r\n      deck: poker.deckMaker(), //.map(cardObject => cardObject)\r\n    }\r\n  }\r\n\r\n  addToHand(cardObject) {\r\n    if (this.state.currentHand.length === 5) {\r\n      return\r\n    }\r\n    this.state.currentHand.push(cardObject)\r\n    this.setState({ currentHand: this.state.currentHand })\r\n  }\r\n\r\n  removeFromHand(card) {\r\n    this.state.currentHand.splice(this.state.currentHand.indexOf(card), 1)\r\n    this.setState({ currentHand: this.state.currentHand })\r\n  }\r\n\r\n  dumpHand() {\r\n    this.setState({ currentHand: [] })\r\n  }\r\n\r\n  render() {\r\n    let evaluated = handEval(this.state.currentHand)\r\n    let hightlightCard = undefined\r\n    if (evaluated && evaluated.type === HIGH_CARD) {\r\n      hightlightCard = { face: evaluated.values[0], suit: evaluated.values[1] }\r\n    }\r\n    return (\r\n      <span className=\"background\">\r\n        <div>\r\n          <h3>Click to select cards from deck</h3>\r\n          {[\"s\", \"d\", \"c\", \"h\"].map((suit) => (\r\n            <div>\r\n              <div>{graphic.suitToString(suit)}</div>\r\n              {this.state.deck\r\n                .filter((card) => card.suit === suit)\r\n                .map((card) => {\r\n                  if (!this.state.currentHand.includes(card)) {\r\n                    return graphic.cardToImage(card, () => this.addToHand(card), undefined)\r\n                  } else {\r\n                    return <span className=\"card\" />\r\n                  }\r\n                })}\r\n            </div>\r\n          ))}\r\n          <div>\r\n            <h3>\r\n              Current hand{\" \"}\r\n              <button\r\n                onClick={() => {\r\n                  this.dumpHand()\r\n                }}\r\n              >\r\n                Return hand\r\n              </button>\r\n            </h3>\r\n\r\n            {console.log(this.state.currentHand)}\r\n            <div className=\"handToString\">\r\n              {this.state.currentHand.length > 0 && poker.handToString(this.state.currentHand)}\r\n            </div>\r\n            <ul>\r\n              <div className=\"hand\">\r\n                {this.state.currentHand.map((card) => {\r\n                  console.log(\"rendering card\", card)\r\n                  return graphic.cardToImage(card, () => this.removeFromHand(card), hightlightCard)\r\n                  // cardToImage() call has to include lambda to use this.data\r\n                })}\r\n              </div>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </span>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport * as poker from \"../nuPoker/nu_poker\"\r\nimport * as graphic from \"../nuPoker/pokerGraphics.js\"\r\nimport _ from \"lodash\"\r\n\r\nexport default class PlayablePoker extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    let deck = _.shuffle(poker.deckMaker())\r\n    this.state = {\r\n      playerOneHand: [],\r\n      playerTwoHand: [],\r\n      deck: deck,\r\n      isGameStarted: false,\r\n      shuffling: 3,\r\n      swapCounter: 3,\r\n      showCards: false,\r\n      results: undefined,\r\n    }\r\n    //setInterval(() => this.setState({ shuffling: this.state.shuffling - 1 }), 1000)\r\n  }\r\n  //  <img src={\"cardGraphics/background.jpg\"} alt=\"Logo\" />\r\n\r\n  swapCards(idxToMove) {\r\n    if (this.state.swapCounter > 0 && !this.state.showCards) {\r\n      this.state.deck.push(this.state.playerOneHand[idxToMove])\r\n      this.state.playerOneHand.splice(idxToMove, 1, this.state.deck.shift())\r\n      this.setState({\r\n        deck: this.state.deck,\r\n        playerOneHand: this.state.playerOneHand,\r\n        swapCounter: this.state.swapCounter - 1,\r\n      })\r\n    }\r\n  }\r\n\r\n  renderDeck() {\r\n    return (\r\n      <div\r\n        className=\"gfg\"\r\n        onClick={() => {\r\n          if (!this.state.isGameStarted) {\r\n            this.setState({\r\n              isGameStarted: true,\r\n              playerOneHand: poker.drawHand(this.state.deck),\r\n              playerTwoHand: poker.drawHand(this.state.deck),\r\n            })\r\n          }\r\n        }}\r\n      >\r\n        <img className=\"deckCard\" src={\"cardGraphics/blue_back.jpg\"} alt=\"Logo\" />\r\n        <h3 className=\"imageText\">{this.state.deck.length}</h3>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  printResults(playerHandResults, computerHandResults) {\r\n    if (this.state.results === 0) {\r\n      return \"Player wins with \" + playerHandResults\r\n    } else if (this.state.results === 1) {\r\n      return \"Computer wins with \" + computerHandResults\r\n    }\r\n  }\r\n\r\n  render() {\r\n    /*if (this.state.shuffling > 0) {\r\n      return <span>shuffling {this.state.shuffling}</span>\r\n    }*/\r\n    let playerHandResults = this.state.isGameStarted && poker.handToString(this.state.playerOneHand)\r\n    let computerHandResults = this.state.isGameStarted && poker.handToString(this.state.playerTwoHand)\r\n\r\n    return (\r\n      <span className=\"background\">\r\n        <div>\r\n          <div className=\"text\">{!this.state.isGameStarted ? \"click the deck to begin\" : undefined}</div>\r\n          {this.state.isGameStarted && (\r\n            <div className=\"text\">\r\n              {this.state.swapCounter} swaps remaining\r\n              <button\r\n                onClick={() => {\r\n                  let results = poker.compareHands([this.state.playerOneHand, this.state.playerTwoHand])\r\n                  this.setState({\r\n                    showCards: true,\r\n                    results: results,\r\n                  })\r\n                }}\r\n              >\r\n                Show up\r\n              </button>\r\n            </div>\r\n          )}\r\n          {this.renderDeck()}\r\n          {this.state.isGameStarted && (\r\n            <span>\r\n              <div className=\"text\">Computer {this.state.showCards ? \"(\" + computerHandResults + \")\" : undefined}</div>\r\n              <ul className=\"card-list\">\r\n                <div className=\"hand\">\r\n                  {this.state.playerTwoHand.map((card, idx) => {\r\n                    if (this.state.showCards) {\r\n                      return graphic.cardToImage(card, () => {}, undefined)\r\n                    } else {\r\n                      return <img key={idx} className=\"card\" src={\"cardGraphics/blue_back.jpg\"} alt=\"Logo\" />\r\n                    }\r\n                  })}\r\n                </div>\r\n              </ul>\r\n              <div className=\"text\">Player ({playerHandResults})</div>\r\n              <ul className=\"card-list\">\r\n                <div className=\"hand\">\r\n                  {this.state.playerOneHand.map((card, idx) => {\r\n                    return graphic.cardToImage(\r\n                      card,\r\n                      () => {\r\n                        this.swapCards(idx)\r\n                      },\r\n                      undefined\r\n                    )\r\n                  })}\r\n                </div>\r\n              </ul>\r\n\r\n              <div className=\"text\">{this.printResults(playerHandResults, computerHandResults)}</div>\r\n            </span>\r\n          )}\r\n        </div>\r\n      </span>\r\n    )\r\n  }\r\n}\r\n\r\n// the deck shouldn't be clickable after showUp\r\n","import React from \"react\"\nimport HandRanker from \"./nuPoker/HandRanker\"\nimport \"./App.css\"\nimport PlayablePoker from \"./playablePoker/playablePoker\"\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentMode: \"play\",\n    }\n  }\n\n  setGameMode(mode) {\n    if (mode === \"play\") {\n      this.setState({ currentMode: \"play\" })\n    } else if (mode === \"rank\") {\n      this.setState({ currentMode: \"rank\" })\n    } else if (mode === \"home\") {\n      this.setState({ currentMode: \"home\" })\n    }\n  }\n\n  setPageLink(mode) {\n    return (\n      <a\n        href={mode}\n        className={this.state.currentMode === mode ? \"warningColor\" : undefined}\n        onClick={(e) => {\n          e.preventDefault()\n          this.setGameMode(mode)\n        }}\n      >\n        {mode}\n      </a>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          {this.setPageLink(\"play\")}\n          {this.setPageLink(\"rank\")}\n        </header>\n        <div className=\"App-header\">\n          <span className=\"background\">\n            {this.state.currentMode === \"home\" && <span>welcome to the new page</span>}\n            {this.state.currentMode === \"rank\" && <HandRanker></HandRanker>}\n            {this.state.currentMode === \"play\" && <PlayablePoker></PlayablePoker>}\n          </span>\n        </div>\n      </div>\n    )\n  }\n}\n// practice _.flatMap\n// hand also shows statistical value\n// ?.\n// highCard() ranks aces as 1, not 14\n// cardSwap shouldn't replace spent cards into deck (deck counter should update)\n// deck should be unclickable during a game instance\n// automatically sort cards in order\n// three of a kind should beat a pair\n\n\n// PRACTICE PASSING LAMBDAS INTO FUNCTIONS AS PARAMETERS\n// rebuild handToString to take results from handEval, not call it\n// highlight highest card if no other hand\n// multiple page > use react-router\n// add button to remove all cards from hand\n// react functions can't be exported, they would operate under the wrong scope\n// they have to be passed through lambdas so they operate under relative scope\n// inversion of control\n\n// how to publish: npm run-script build\n// manual copy files from /build to /docs\n// commit > push\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}